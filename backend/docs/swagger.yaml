openapi: 3.0.0
info:
  title: Dudu Store API
  description: API documentation for Dudu Store e-commerce platform
  version: 1.0.0
  contact:
    email: admin@dudustore.com

servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://api.dudustore.com/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        original_price:
          type: number
          format: float
          nullable: true
        stock:
          type: integer
        image:
          type: string
          nullable: true
        category_id:
          type: string
          format: uuid
        is_featured:
          type: boolean
        is_new:
          type: boolean
        is_sale:
          type: boolean
        badge:
          type: string
          nullable: true
        rating:
          type: number
          format: float
        view_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - price
        - category_id

    ProductVariant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        image:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - product_id
        - name
        - price

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        slug:
          type: string
        image:
          type: string
          nullable: true
        parent_id:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - slug

    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        badge:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        role:
          type: string
          enum: [customer, admin, staff]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - email
        - first_name
        - last_name

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        total_amount:
          type: number
          format: float
        shipping_address:
          type: string
        payment_method:
          type: string
        payment_status:
          type: string
          enum: [pending, paid, failed, refunded]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user_id
        - total_amount
        - shipping_address
        - payment_method

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        variant_id:
          type: string
          format: uuid
          nullable: true
        quantity:
          type: integer
        price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - order_id
        - product_id
        - quantity
        - price

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
          nullable: true
        is_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - product_id
        - user_id
        - rating

    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error, fail]
        message:
          type: string

paths:
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of products with filtering, sorting, and pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            default: created_at
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - in: query
          name: category
          schema:
            type: string
            format: uuid
          description: Filter by category ID
        - in: query
          name: collection
          schema:
            type: string
            format: uuid
          description: Filter by collection ID
        - in: query
          name: search
          schema:
            type: string
          description: Search term
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: featured
          schema:
            type: boolean
          description: Filter featured products
        - in: query
          name: isNew
          schema:
            type: boolean
          description: Filter new products
        - in: query
          name: isSale
          schema:
            type: boolean
          description: Filter sale products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalProducts:
                        type: integer
                      totalPages:
                        type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
    
    post:
      summary: Create a new product
      description: Create a new product (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                original_price:
                  type: number
                stock:
                  type: integer
                category_id:
                  type: string
                  format: uuid
                is_featured:
                  type: boolean
                is_new:
                  type: boolean
                is_sale:
                  type: boolean
                badge:
                  type: string
                image:
                  type: string
                  format: binary
                collections:
                  type: array
                  items:
                    type: string
                    format: uuid
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
                      stock:
                        type: integer
              required:
                - name
                - price
                - category_id
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Get a product by ID
      description: Retrieve a single product by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update a product
      description: Update a product (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                original_price:
                  type: number
                stock:
                  type: integer
                category_id:
                  type: string
                  format: uuid
                is_featured:
                  type: boolean
                is_new:
                  type: boolean
                is_sale:
                  type: boolean
                badge:
                  type: string
                image:
                  type: string
                  format: binary
                collections:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a product
      description: Delete a product (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/featured:
    get:
      summary: Get featured products
      description: Retrieve a list of featured products
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 8
          description: Number of products to return
      responses:
        '200':
          description: A list of featured products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

  /products/new:
    get:
      summary: Get new products
      description: Retrieve a list of new products
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 8
          description: Number of products to return
      responses:
        '200':
          description: A list of new products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

  /products/sale:
    get:
      summary: Get sale products
      description: Retrieve a list of products on sale
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 8
          description: Number of products to return
      responses:
        '200':
          description: A list of sale products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

  /products/{id}/related:
    get:
      summary: Get related products
      description: Retrieve products related to a specific product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 4
          description: Number of products to return
      responses:
        '200':
          description: A list of related products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/search:
    post:
      summary: Search products
      description: Search for products by name or description
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
              required:
                - query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                  total:
                    type: integer
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
                address:
                  type: string
              required:
                - email
                - password
                - first_name
                - last_name
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      description: Authenticate a user and get a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      summary: Get current user
      description: Get the profile of the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/dashboard:
    get:
      summary: Get dashboard statistics
      description: Get summary statistics for the admin dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      products:
                        type: object
                        properties:
                          total_products:
                            type: integer
                          in_stock:
                            type: integer
                          out_of_stock:
                            type: integer
                      orders:
                        type: object
                        properties:
                          total_orders:
                            type: integer
                          pending_orders:
                            type: integer
                          processing_orders:
                            type: integer
                          shipped_orders:
                            type: integer
                          delivered_orders:
                            type: integer
                          cancelled_orders:
                            type: integer
                      users:
                        type: object
                        properties:
                          total_users:
                            type: integer
                          new_users:
                            type: integer
                      revenue:
                        type: object
                        properties:
                          total_revenue:
                            type: number
                          monthly_revenue:
                            type: number
                          weekly_revenue:
                            type: number
                      recentOrders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      lowStock:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/products/views:
    get:
      summary: Get product view statistics
      description: Get statistics about product views
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: period
          schema:
            type: string
            enum: [day, week, month, year]
            default: week
          description: Time period for statistics
        - in: query
          name: productId
          schema:
            type: string
            format: uuid
          description: Filter by product ID
      responses:
        '200':
          description: Product view statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      period:
                        type: string
                      stats:
                        type: array
                        items:
                          type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/upload/product:
    post:
      summary: Upload product image
      description: Upload an image for a product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                      publicId:
                        type: string
                      format:
                        type: string
                      width:
                        type: integer
                      height:
                        type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'